 /*
 *
 * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
 *
 *                            IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef IFX_DEBUGPIPE_H
#define IFX_DEBUGPIPE_H

#include "Platform_Types.h"
#include "IfxStdIf.h"
#include "IfxStdIf_DPipe.h"

typedef struct{
        Ifx_SizeT size;
}Ifx_DebugPipeConfig;

typedef union
{
        struct
        {
                volatile uint8 active;
                volatile uint8 ready;
                volatile uint8 writepos;
                volatile uint8 readpos;
        } data;
        volatile uint32 value;
}Ifx_DebugPipeBufferControl;

typedef struct{
        volatile Ifx_DebugPipeBufferControl control;
        char *      data;
        Ifx_SizeT   size;
}Ifx_DebugPipeBuffer;

typedef volatile struct{
        Ifx_DebugPipeBuffer tx;
        Ifx_DebugPipeBuffer rx;
        uint32 writeCount;
        uint32 readCount;
        Ifx_TickTime txTimestamp;
        boolean isError;
}Ifx_DebugPipe;

extern boolean Ifx_DebugPipe_Init(Ifx_DebugPipe * dpipe, Ifx_DebugPipeConfig * config);
extern boolean Ifx_DebugPipe_FifoRead(volatile Ifx_DebugPipeBuffer * buffer, char * dst, uint8 * count);
extern boolean Ifx_DebugPipe_FifoWrite(volatile Ifx_DebugPipeBuffer * buffer, char * src, uint8 count);
extern boolean Ifx_DebugPipe_stdIfDPipeInit(IfxStdIf_DPipe *stdif, Ifx_DebugPipe *dpipe);
#endif
