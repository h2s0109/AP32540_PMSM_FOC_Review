/*
 * \file TLE9180.h
 * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
 *
 *                            IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _TLE9180_H_
#define _TLE9180_H_

#include "If/SpiIf.h"
#include "Port/Std/IfxPort.h"
#include "Cpu/Std/IfxCpu_Intrinsics.h"
#include "Qspi/SpiMaster/IfxQspi_SpiMaster.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/
// SPI Configurations for TLF35584 Channel receive
//#define IFX_TLE9180_SPI_BUFFER_SIZE         (68U)
#define IFX_TLE9180_BAUDRATE                (1.0e6)
#define IFX_TLE9180_DATAWIDTH               (24U)

#define IFX_TLE9180_SPI_BUFFER_SIZE (\
	(sizeof(IfxTLE9180_startupConfig)/sizeof(IfxTLE9180_SpiRx)) + \
    (4U) + \
	(sizeof(IfxTLE9180_readCommands)/sizeof(IfxTLE9180_SpiRx)))

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/
/** \brief SPI Transmit frame bit-field for TLE9180
 *
 */
typedef struct{
    unsigned CRC:3;             /** \brief [0..2] crc3 */
    unsigned :5;                /** \brief [3..7] reserved */
    unsigned DATA:8;            /** \brief [8..15] data field */
    unsigned ADDRESS:7;         /** \brief [16..22] address field */
    unsigned C:1;               /** \brief [23] read/write control */
    unsigned :8;                /** \brief [24..31] unused */
} IfxTLE9180_SpiTx_bits;

/** \brief SPI Receive frame bit-field for TLE9180
 *
 */
typedef struct{
    unsigned CRC:3;             /** \brief [0..2] crc3 */
    unsigned :1;                /** \brief [3] reserved */
    unsigned DATA:8;            /** \brief [4..11] data field */
    unsigned ADDRESS:7;         /** \brief [12..18] address field */
    unsigned SPLEVENT:1;        /** \brief [19] SPI Status Special Event Flag */
    unsigned SPIERR:1;          /** \brief [19] SPI Status SPI communication error Flag */
    unsigned CONFVALID:1;       /** \brief [19] SPI Status Config Valid Flag */
    unsigned WARNING:1;         /** \brief [19] SPI Status Warning Flag */
    unsigned ERROR:1;           /** \brief [19] SPI Status Error Flag */
    unsigned :8;                /** \brief [24..31] unused */
} IfxTLE9180_SpiRx_bits;

/** \brief SPI Transmit data structure for TLE9180
 *
 */
typedef union
{
    uint32 U;                   /** \brief Unsigned access */
    IfxTLE9180_SpiTx_bits B; /** \brief Bitfield access */
} IfxTLE9180_SpiTx;

/** \brief SPI Receive data structure for TLE9180
 *
 */
typedef union
{
    uint32 U;                   /** \brief Unsigned access */
    IfxTLE9180_SpiRx_bits B; /** \brief Bitfield access */
} IfxTLE9180_SpiRx;


typedef struct
{
	IfxPort_Pin	   *inhibit;                /**< \brief Output pin Inhibit */
	IfxPort_Pin	   *enable;                 /**< \brief Output pin Enable */
	IfxPort_Pin	   *safeOff;                /**< \brief Output pin SafetyOff */
	IfxPort_Pin	   *error;                  /**< \brief Input pin Error */
}IfxTLE9180_Pins;

typedef boolean (*IfxTLE9180_SpiExchangeIfPtrType)(void *, void *, void *, Ifx_SizeT);

typedef struct
{
	IfxTLE9180_SpiExchangeIfPtrType spiExchange;
}IfxTLE9180_spiInterfaces;

typedef struct
{
	uint32	            size;
	IfxTLE9180_Pins     pins;
    void               *spiChannel;
	IfxTLE9180_spiInterfaces spiIf;
}IfxTLE9180_Config;

typedef enum
{
	IfxTLE9180_Possibility_none = 0,
	IfxTLE9180_Possibility_Ls = 1,
	IfxTLE9180_Possibility_Hs = 2
}IfxTLE9180_Possibility;

typedef struct
{
	void               *spiChannel;
	IfxTLE9180_SpiRx   *receiveBuffer;
	uint32	            size;
	uint32	            readIndex;
	IfxTLE9180_Pins     pins;
	IfxTLE9180_spiInterfaces spiIf;
}IfxTLE9180;

/******************************************************************************/
/*-------------------------Function Prototypes--------------------------------*/
/******************************************************************************/

IFX_EXTERN boolean IfxTLE9180_init(IfxTLE9180* handle, const IfxTLE9180_Config* config);
IFX_EXTERN boolean IfxTLE9180_loadStartupConfiguration(IfxTLE9180* handle);
IFX_EXTERN boolean IfxTLE9180_readRegister(IfxTLE9180* handle);

/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

IFX_INLINE void IfxTLE9180_deactivateInhibit(IfxTLE9180* handle)
{
	Ifx_P * port= handle->pins.inhibit->port;
	uint8 pinIndex= handle->pins.inhibit->pinIndex;
	IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
}

IFX_INLINE void IfxTLE9180_activateInhibit(IfxTLE9180* handle)
{
	Ifx_P * port= handle->pins.inhibit->port;
	uint8 pinIndex= handle->pins.inhibit->pinIndex;
	IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
}

IFX_INLINE void IfxTLE9180_activateEnable(IfxTLE9180* handle)
{
	Ifx_P * port= handle->pins.enable->port;
	uint8 pinIndex= handle->pins.enable->pinIndex;
	IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
}

IFX_INLINE void IfxTLE9180_deactivateEnable(IfxTLE9180* handle)
{
	Ifx_P * port= handle->pins.enable->port;
	uint8 pinIndex= handle->pins.enable->pinIndex;
	IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
}

IFX_INLINE void IfxTLE9180_activateSafeOff(IfxTLE9180* handle)
{
	Ifx_P * port= handle->pins.safeOff->port;
	uint8 pinIndex= handle->pins.safeOff->pinIndex;
	IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
}

IFX_INLINE void IfxTLE9180_deactivateSafeOff(IfxTLE9180* handle)
{
	Ifx_P * port= handle->pins.safeOff->port;
	uint8 pinIndex= handle->pins.safeOff->pinIndex;
	IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
}

IFX_INLINE boolean IfxTLE9180_getErrorState(IfxTLE9180* handle)
{
	Ifx_P * port= handle->pins.error->port;
	uint8 pinIndex= handle->pins.error->pinIndex;
	return (IfxPort_getPinState(port, pinIndex) == FALSE);
}

#endif /* _TLE9180_H_ */
