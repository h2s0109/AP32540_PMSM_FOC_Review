/**
 * @file Tables.h
 * @brief Lookup tables.
 *
 * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
 *
 *                            IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 *
 *
 * $Revision: 157 $
 * $Date: 2011-03-18 18:09:52 +0100 (Fri, 18 Mar 2011) $
 *
 */

#ifndef TABLES_H
#define TABLES_H
//---------------------------------------------------------------------------

//#include "Configuration.h"
#include "Cpu/Std/IfxCpu_Intrinsics.h"
#include "Arith.StdReal.h"
#include "StdReal.h"
//---------------------------------------------------------------------------


// ================================================================
//	define lookup table
//
//
//	OneOverSqrt3=1/sqrt(3)
//
//	SinCosVector
//	Look up table for Sqrt(3)/pi*SIN((k-1)*pi/3) and Sqrt(3)/pi*Cos((k-1)*pi/3)   k=0..6
//
//	SinTable
//  	Look up table for sin(k*pi*2/COSSIN_TABLE_SIZE)   k=0..COSSIN_TABLE_SIZE+COSSIN_TABLE_SIZE/4
//
//
// ================================================================

#ifndef CONST_LOOKUP_TABLES
#define CONST_LOOKUP_TABLES   (1)       /**< @brief Default lookup tables are generated and stored in RAM */
#endif

#if (CONST_LOOKUP_TABLES != 0)
#define LOOKUP_TABLE const
#else
#define LOOKUP_TABLE
#endif

extern StdReal sinCosVector[14];

/** @brief Resolution of cosinus and sinus lookup table in bits */
#define COSSIN_TABLE_RESOLUTION (10)

/** @brief Size of the cosinus & sinus lookup table */
#define COSSIN_TABLE_SIZE       (1<<COSSIN_TABLE_RESOLUTION)

extern LOOKUP_TABLE StdReal sinCosTable[COSSIN_TABLE_SIZE + (COSSIN_TABLE_SIZE / 4)];
extern LOOKUP_TABLE StdReal* cosTable;

#define INDEX_PI   (COSSIN_TABLE_SIZE / 2)

#ifndef OBJECT_NO_INIT
void LookUp_Init(void);
#endif

IFX_INLINE StdReal LookUp_Sinus(sint16 index)
{
    index &= COSSIN_TABLE_SIZE - 1;
    return sinCosTable[index];
}

IFX_INLINE StdReal LookUp_Cosinus(sint16 index)
{
    index &= (COSSIN_TABLE_SIZE - 1);
    return cosTable[index];
}

IFX_INLINE CplxStdReal LookUp_CosinusSinus(sint16 index)
{
    CplxStdReal result;
    index &= COSSIN_TABLE_SIZE - 1;
    result.imag = sinCosTable[index];
    result.real = cosTable[index];
    return result;
}


#define ARCTAN_TABLE_LOW_SIZE    (512)
#define ARCTAN_TABLE_HIGH_SIZE   (512)

#define ARCTAN_LIMIT_LOW         (4)
#define ARCTAN_LIMIT_HIGH        (64)


extern LOOKUP_TABLE sint16 arctanTableLow[ARCTAN_TABLE_LOW_SIZE];
extern LOOKUP_TABLE sint16 arctanTableHigh[ARCTAN_TABLE_HIGH_SIZE];
sint16 LookUp_Arctan(StdReal x, StdReal y);

//---------------------------------------------------------------------------
#endif
