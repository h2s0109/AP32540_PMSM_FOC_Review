/*
 * \file PmsmFoc_Functions.h
 * @brief Field Oriented Control
 * \ingroup pmsm_foc_controlmodules
 * \version disabled
 * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
 *
 *                            IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef PMSM_FOC_CONTROLMODULES_PMSM_FOC_FUNCTIONS_H
#define PMSM_FOC_CONTROLMODULES_PMSM_FOC_FUNCTIONS_H

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/
#include "PmsmFoc_UserConfig.h"

#include MOTOR_TYPE_PATH
#include "PmsmFoc.h"


/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** /brief Initialize the motor control object.
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_initMotorControl(MotorControl* const motorCtrl);

/** /brief Initialize the control variables.
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_initControlVariables(MotorControl* const motorCtrl);

/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_doFieldOrientedControl(MotorControl* const motorCtrl);

/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN void PmsmFoc_doVfControl(MotorControl* const motorCtrl);

/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_reconstructCurrent(MotorControl* const motorCtrl);

/** /brief
 *
 * /param foc Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN void PmsmFoc_doClarkeTransform(PmsmFoc* const foc);
/** /brief
 *
 * /param foc Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN void PmsmFoc_getCosSin(PmsmFoc* const foc);
/** /brief
 *
 * /param foc Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN void PmsmFoc_doParkTransform(PmsmFoc* const foc);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_setIdqRef(MotorControl* const motorCtrl);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_getIdqRef(MotorControl* const motorCtrl);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_setIdRefLimit(MotorControl* const motorCtrl, float32 min, float32 max);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_setIqRefLimit(MotorControl* const motorCtrl, float32 min, float32 max);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN StdReal PmsmFoc_getIdRefLimit(MotorControl* const motorCtrl);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN StdReal PmsmFoc_getIqRefLimit(MotorControl* const motorCtrl);
/** /brief
 *
 * /param foc Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN void PmsmFoc_doIdControl(PmsmFoc* const foc);
/** /brief
 *
 * /param foc Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN void PmsmFoc_doIqControl(PmsmFoc* const foc);
/** /brief
 *
 * /param foc Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN StdReal PmsmFoc_getVdqMagnitude(PmsmFoc* const foc);
/** /brief
 *
 * /param foc Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN StdReal PmsmFoc_getVdqLimit(PmsmFoc* const foc);
/** /brief
 *
 * /param foc Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN void PmsmFoc_setVdqLimit(PmsmFoc* const foc);
/** /brief
 *
 * /param foc Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN void PmsmFoc_doVdqLimit(PmsmFoc* const foc);
/** /brief
 *
 * /param foc Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN void PmsmFoc_doInverseParkTransform(PmsmFoc* const foc);
/** /brief
 *
 * /param foc Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN void PmsmFoc_doDqDecoupling(PmsmFoc* const foc);

/** /brief
 *
 * /param foc Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup pmsm_foc_controlmodules
 */
IFX_EXTERN void PmsmFoc_doMiscWorks (MotorControl* const motorCtrl);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_doSpeedControl(MotorControl* const motorCtrl);

/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_doEncoderCalibration(MotorControl* const motorCtrl);

/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_resetEncoderCalibrationStatus(MotorControl* const motorCtrl);
/** /brief
 *
 * Iq_ref:   _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
 * 		  		     _ _ _ _		 _ _ _ _ 		 _ _ _ _
 * Id_ref:	 _ _ _ _|		|_ _ _ _|       |_ _ _ _|		|
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 *
 */
IFX_EXTERN void PmsmFoc_tuneCurrentRegulator(MotorControl* const motorCtrl);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_doPeriodicRoutine (MotorControl* const motorCtrl);
/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_INLINE void PmsmFoc_doSpeedRefLinearRamp(PmsmFoc* const foc);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_INLINE void PmsmFoc_doCurrentRefLinearRamp(PmsmFoc* const foc);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_INLINE float32 PmsmFoc_getSpeedRefLinearRamp(PmsmFoc* const foc);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_INLINE CplxStdReal PmsmFoc_getCurrentRefLinearRamp(PmsmFoc* const foc);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_INLINE void PmsmFoc_setSpeedRefLinearRamp(PmsmFoc* const foc, float32 ref);
/** /brief
 *
 * /param motorCtrl Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_INLINE void PmsmFoc_setCurrentRefLinearRamp(PmsmFoc* const foc, CplxStdReal ref);

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/
IFX_INLINE void PmsmFoc_doSpeedRefLinearRamp(PmsmFoc* const foc)
{
	Ifx_RampF32_step(&foc->speedRamp);
}

IFX_INLINE void PmsmFoc_doCurrentRefLinearRamp(PmsmFoc* const foc)
{
	Ifx_RampF32_step(&foc->iqRefExternalRamp);
	Ifx_RampF32_step(&foc->idRefExternalRamp);
}

IFX_INLINE float32 PmsmFoc_getSpeedRefLinearRamp(PmsmFoc* const foc)
{
	return Ifx_RampF32_getValue(&foc->speedRamp);
}

IFX_INLINE CplxStdReal PmsmFoc_getCurrentRefLinearRamp(PmsmFoc* const foc)
{
	CplxStdReal result;
	result.imag = Ifx_RampF32_getValue(&foc->iqRefExternalRamp);
	result.real = Ifx_RampF32_getValue(&foc->idRefExternalRamp);

	return result;
}

IFX_INLINE void PmsmFoc_setSpeedRefLinearRamp(PmsmFoc* const foc, float32 ref)
{
	Ifx_RampF32_setRef(&foc->speedRamp,ref);
}

IFX_INLINE void PmsmFoc_setCurrentRefLinearRamp(PmsmFoc* const foc, CplxStdReal ref)
{
	Ifx_RampF32_setRef(&foc->iqRefExternalRamp,ref.imag);
	Ifx_RampF32_setRef(&foc->idRefExternalRamp,ref.real);
}

#endif /* PMSM_FOC_CONTROLMODULES_PMSM_FOC_FUNCTIONS_H */
