/*
 * \file TLE9180.h
 * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
 *
 *                            IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef _TLE9180_H_
#define _TLE9180_H_

#include "IfxPort.h"
#include "Cpu/Std/IfxCpu_Intrinsics.h"

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/
#include "PmsmFoc_UserConfig.h"
#include MCUCARD_TYPE_PATH
#include <Qspi/SpiMaster/IfxQspi_SpiMaster.h>

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/
#define IFX_TLE9180_SPI_STUP_COMMANDS_SIZE 14
#define IFX_TLE9180_SPI_READ_COMMANDS_SIZE 14
#define IFX_TLE9180_BUFFER_SIZE IFX_TLE9180_SPI_STUP_COMMANDS_SIZE

// SPI Configurations for TLF9180 Channel receive
#define IFX_TLE9180_BAUDRATE               (1.0e6)
#define IFX_TLE9180_DATAWIDTH              (24U)

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/
/** \brief SPI Transmit frame bit-field for TLE9180
 *
 */
typedef struct{
    unsigned CRC:3;             /** \brief [0..2] crc3 */
    unsigned :5;                /** \brief [3..7] reserved */
    unsigned DATA:8;            /** \brief [8..15] data field */
    unsigned ADDRESS:7;         /** \brief [16..22] address field */
    unsigned C:1;               /** \brief [23] read/write control */
    unsigned :8;                /** \brief [24..31] unused */
} IfxTLE9180_SpiTx_bits;

/** \brief SPI Receive frame bit-field for TLE9180
 *
 */
typedef struct{
    unsigned CRC:3;             /** \brief [0..2] crc3 */
    unsigned :1;                /** \brief [3] reserved */
    unsigned DATA:8;            /** \brief [4..11] data field */
    unsigned ADDRESS:7;         /** \brief [12..18] address field */
    unsigned SPLEVENT:1;        /** \brief [19] SPI Status Special Event Flag */
    unsigned SPIERR:1;          /** \brief [19] SPI Status SPI communication error Flag */
    unsigned CONFVALID:1;       /** \brief [19] SPI Status Config Valid Flag */
    unsigned WARNING:1;         /** \brief [19] SPI Status Warning Flag */
    unsigned ERROR:1;           /** \brief [19] SPI Status Error Flag */
    unsigned :8;                /** \brief [24..31] unused */
} IfxTLE9180_SpiRx_bits;

/** \brief SPI Transmit data structure for TLE9180
 *
 */
typedef union
{
    uint32 U;                   /** \brief Unsigned access */
    IfxTLE9180_SpiTx_bits B; /** \brief Bitfield access */
} IfxTLE9180_SpiTx;

/** \brief SPI Receive data structure for TLE9180
 *
 */
typedef union
{
    uint32 U;                   /** \brief Unsigned access */
    IfxTLE9180_SpiRx_bits B; /** \brief Bitfield access */
} IfxTLE9180_SpiRx;

typedef struct
{
	IfxPort_Pin	   *inhibit;                /**< \brief Output pin Inhibit */
	IfxPort_Pin	   *enable;                 /**< \brief Output pin Enable */
	IfxPort_Pin	   *safeOff;                /**< \brief Output pin SafetyOff */
	IfxPort_Pin	   *error;                  /**< \brief Input pin Error */
}IfxTLE9180_Pins;

typedef struct
{
	IfxTLE9180_Pins     pins;
}IfxTLE9180_Config;

typedef struct
{
	// uint32	            size;
	IfxTLE9180_Pins     pins;
}IfxTLE9180;

typedef struct
{
    IfxTLE9180_SpiTx spiTxBuffer[IFX_TLE9180_BUFFER_SIZE];                               /**< \brief Qspi Transmit buffer */
    IfxTLE9180_SpiRx spiRxBuffer[IFX_TLE9180_BUFFER_SIZE];                               /**< \brief Qspi receive buffer */
} AppQspi_TLE9180_Buffer;

/** \brief QspiCpu global data */
typedef struct
{
    AppQspi_TLE9180_Buffer qspiBuffer;                       /**< \brief Qspi buffer */
    struct
    {
        IfxQspi_SpiMaster         spiMaster;             /**< \brief Spi Master handle */
        IfxQspi_SpiMaster_Channel spiMasterChannel;      /**< \brief Spi Master Channel handle */
    }drivers;
}  App_Qspi_TLE9180_Cpu;

/******************************************************************************/
/*-------------------------Function Prototypes--------------------------------*/
/******************************************************************************/
IFX_EXTERN void IfxTLE9180_initSpi(void);
IFX_EXTERN boolean IfxTLE9180_init(IfxTLE9180_Pins *tle9180PinCtrl);
IFX_EXTERN uint32 IfxTLE9180_readRegister(void);
IFX_EXTERN uint32 IfxTLE9180_read_write(uint32* send_data, uint32 data_num);
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

IFX_INLINE void IfxTLE9180_deactivateInhibit(IfxTLE9180_Pins* handle)
{
	Ifx_P * port= handle->inhibit->port;
	uint8 pinIndex= handle->inhibit->pinIndex;
	IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
}

IFX_INLINE void IfxTLE9180_activateInhibit(IfxTLE9180_Pins* handle)
{
	Ifx_P * port= handle->inhibit->port;
	uint8 pinIndex= handle->inhibit->pinIndex;
	IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
}
IFX_INLINE void IfxTLE9180_activateEnable(IfxTLE9180_Pins* handle)
{
	Ifx_P * port= handle->enable->port;
	uint8 pinIndex= handle->enable->pinIndex;
	IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
}

IFX_INLINE void IfxTLE9180_deactivateEnable(IfxTLE9180_Pins* handle)
{
	Ifx_P * port= handle->enable->port;
	uint8 pinIndex= handle->enable->pinIndex;
	IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
}

IFX_INLINE void IfxTLE9180_activateSafeOff(IfxTLE9180_Pins* handle)
{
	Ifx_P * port= handle->safeOff->port;
	uint8 pinIndex= handle->safeOff->pinIndex;
	IfxPort_setPinState(port, pinIndex, IfxPort_State_low);
}

IFX_INLINE void IfxTLE9180_deactivateSafeOff(IfxTLE9180_Pins* handle)
{
	Ifx_P * port= handle->safeOff->port;
	uint8 pinIndex= handle->safeOff->pinIndex;
	IfxPort_setPinState(port, pinIndex, IfxPort_State_high);
}

IFX_INLINE boolean IfxTLE9180_getErrorState(IfxTLE9180_Pins* handle)
{
	Ifx_P * port= handle->error->port;
	uint8 pinIndex= handle->error->pinIndex;
	return (IfxPort_getPinState(port, pinIndex) == FALSE);
}

#if defined(__DCC__)
    #if CPU_WHICH_SERVICE_TLF == 0
	#pragma section DATA ".data_cpu0" ".bss_cpu0" far-absolute RW
    #pragma section CODE ".text_cpu0"
    #elif ((CPU_WHICH_SERVICE_TLF == 1) && (CPU_WHICH_SERVICE_TLF < IFXCPU_NUM_MODULES))
	#pragma section DATA ".data_cpu1" ".bss_cpu1" far-absolute RW
    #pragma section CODE ".text_cpu1"
    #elif ((CPU_WHICH_SERVICE_TLF == 2) && (CPU_WHICH_SERVICE_TLF < IFXCPU_NUM_MODULES))
	#pragma section DATA ".data_cpu2" ".bss_cpu2" far-absolute RW
    #pragma section CODE ".text_cpu2"
    #elif ((CPU_WHICH_SERVICE_TLF == 3) && (CPU_WHICH_SERVICE_TLF < IFXCPU_NUM_MODULES))
	#pragma section DATA ".data_cpu3" ".bss_cpu3" far-absolute RW
    #pragma section CODE ".text_cpu3"
    #elif ((CPU_WHICH_SERVICE_TLF == 4) && (CPU_WHICH_SERVICE_TLF < IFXCPU_NUM_MODULES))
	#pragma section DATA ".data_cpu4" ".bss_cpu4" far-absolute RW
    #pragma section CODE ".text_cpu4"
    #elif ((CPU_WHICH_SERVICE_TLF == 5) && (CPU_WHICH_SERVICE_TLF < IFXCPU_NUM_MODULES))
	#pragma section DATA ".data_cpu5" ".bss_cpu5" far-absolute RW
    #pragma section CODE ".text_cpu5"
    #endif
#endif

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/******************************************************************************/
/*------------------------------Global variables------------------------------*/
/******************************************************************************/
extern App_Qspi_TLE9180_Cpu g_Qspi_TLE9180_Cpu;
extern IfxTLE9180_Pins Tle9180PinCtrl;
/******************************************************************************/
/*-------------------------Function Prototypes--------------------------------*/
/******************************************************************************/

#if defined(__DCC__)
#pragma section CODE
#pragma section DATA RW
#endif

#endif  // _TLE9180_H_
