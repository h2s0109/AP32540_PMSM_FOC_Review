/*
 * \file PmsmFoc_CurrentDcLinkSense.h
 * \brief
 * \ingroup
 * \version 
 * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
 *
 *                            IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by 
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the 
 * Software, and to permit third-parties to whom the Software is furnished to 
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */


#ifndef PMSMFOC_CURRENTDCLINKSENSE_H_
#define PMSMFOC_CURRENTDCLINKSENSE_H_

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/
#include "PmsmFoc_UserConfig.h"
#include MCUCARD_TYPE_PATH
#include INVERTERCARD_TYPE_PATH
#include "PmsmMid_internal.h"
#include "Port/Std/IfxPort.h"

/******************************************************************************/
/*--------------------------------Macros--------------------------------------*/
/******************************************************************************/

/******************************************************************************/
/*------------------------------Global variables------------------------------*/
/******************************************************************************/

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/
typedef enum
{
	HighSideCurrentSense_Gain_25VperV = 0,
	HighSideCurrentSense_Gain_50VperV = 1,
	HighSideCurrentSense_Gain_100VperV = 2,
	HighSideCurrentSense_Gain_200VperV = 3
}HighSideCurrentSense_Gain;
/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/
typedef struct
{
	IfxPort_Pin	   *gainSelelct0;             /**< \brief Output pin gain select 0 */
	IfxPort_Pin	   *gainSelelct1;             /**< \brief Output pin gain select 1 */
}HighSideCurrentSense_Pins;

typedef struct
{
	HighSideCurrentSense_Pins     pins;
}HighSideCurrentSense_Config;


typedef struct
{
    sint32 inputSum;                      /**< \brief Current phase A raw sum */
    sint32 count;                         /**< \brief Calibration index */
    PmsmFoc_SensorAdc_CalibrationStatus status;
} LowSideCurrentSense_Calibration;

typedef struct
{
    sint32 inputSum;                      /**< \brief Current phase A raw sum */
    sint32 count;                         /**< \brief Calibration index */

    PmsmFoc_SensorAdc_CalibrationStatus status;
} HighSideCurrentSense_Calibration;


/** \brief Structure for high side current measurement configuration and handling
 */
typedef struct
{
	PmsmFoc_SensorAdc       input;
	PmsmFoc_SensorAdc       refInput;
	LowSideCurrentSense_Calibration    calibration;
} LowSideCurrentSense;

typedef struct
{
	PmsmFoc_SensorAdc       input;
	HighSideCurrentSense_Calibration    calibration;
	HighSideCurrentSense_Pins pins;
	sint16				selectedGain;
} HighSideCurrentSense;


/******************************************************************************/
/*------------------------Private Variables/Constants-------------------------*/
/******************************************************************************/

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** /brief
 *
 * /param highSideCurrentSense Reference to structure that contains instance data members
 * /param config Configuration structure
 * /return
 * /note
 * /see
 * /ingroup
 */
// IFX_EXTERN boolean PmsmFoc_CurrentDCLinkSenseHs_init(HighSideCurrentSense* highSideCurrentSense, const HighSideCurrentSense_Config* config);

/** /brief
 *
 * /param highSideCurrentSense Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_CurrentDCLinkSenseHs_doCalibration(HighSideCurrentSense* const highSideCurrentSense);

/** /brief
 *
 * /param highSideCurrentSense Reference to structure that contains instance data members
 * /param gain Selected gain
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_CurrentDCLinkSenseHs_setGain(HighSideCurrentSense* const highSideCurrentSense, HighSideCurrentSense_Gain gain);

/** /brief
 *
 * /param highSideCurrentSense Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_CurrentDCLinkSenseHs_resetCalibrationStatus(HighSideCurrentSense* const highSideCurrentSense);

/** /brief
 *
 * /param highSideCurrentSense Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
PmsmFoc_SensorAdc_CalibrationStatus PmsmFoc_CurrentDCLinkSenseHs_getCalibrationStatus(HighSideCurrentSense* const highSideCurrentSense);

/** /brief
 *
 * /param highSideCurrentSense Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN void PmsmFoc_CurrentDCLinkSenseHs_getRawCurrentValue(HighSideCurrentSense* const highSideCurrentSense);

/** /brief
 *
 * /param highSideCurrentSense Reference to structure that contains instance data members
 * /return
 * /note
 * /see
 * /ingroup
 */
IFX_EXTERN float32 PmsmFoc_CurrentDCLinkSenseHs_updateAnalogInput(PmsmFoc_SensorAdc* const highSideCurrentSenseCh);
/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/


#endif /* PMSMFOC_CURRENTDCLINKSENSE_H_ */
