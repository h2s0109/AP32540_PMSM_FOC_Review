/**
 * \file touch.h
 * \brief Header file for touch input of our TFT
 *
 * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.

 *
 */

#ifndef TOUCH_H_
#define TOUCH_H_


typedef enum
{
    TOUCH_UNINIT,               /*!< \brief Not used */
    TOUCH_DOWN,                 /*!< \brief Not used */
    TOUCH_MOVE,                 /*!< \brief Not used */
    TOUCH_UP,                   /*!< \brief Normal Operation */
    TOUCH_DOWN3S,               /*!< \brief Failure Buffer Full */
    TOUCH_DOWN10S               /*!< \brief Failure Buffer Erased */
} TTOUCH_STATUS;
#define MASK_TOUCH_UNINIT 0x1
#define MASK_TOUCH_DOWN 0x2
#define MASK_TOUCH_MOVE 0x4
#define MASK_TOUCH_UP 0x8
#define MASK_TOUCH_DOWN3S 0x10
#define MASK_TOUCH_DOWN10S 0x20

typedef struct TTOUCHCOMMAND
{
    uint32 bacon;
    uint32 command;
} TTOUCHCOMMAND;

typedef struct TTOUCHCRX
{
    uint32 data;
    uint32 status;
} TTOUCHRX;

typedef struct TOUCH_EVENT
{
    uint32 time;
    sint32 dtime;
    sint16 x;
    sint16 y;
    sint16 dx;
    sint16 dy;
    sint16 xdisp;
    sint16 ydisp;
    TTOUCH_STATUS status;
} TTOUCH_EVENT;

typedef struct TOUCH_DASINFO
{
uint32 event;
uint32 button;
uint32 x;
uint32 y;
float32 xmin;               // is equal to coordinate 0
float32 xmax;               // is equal to coordinate TERMINAL_MAXX-1
float32 ymin;               // is equal to coordinate 0
float32 ymax;               // is equal to coordinate TERMINAL_MAXY-1
} TTOUCH_DASINFO;

typedef struct TOUCH_DRIVER
{
	uint32 time;
    uint32 prev_time;
    uint32 prev_time_down;
    uint32 bounce_limit;
    uint32 bounce_cnt;
    sint16 x;
    sint16 prev_x;
    sint16 prev_x_down;
    sint16 y;
    sint16 prev_y;
    sint16 prev_y_down;
    sint16 cnt;
    sint16 xdisp;
    sint16 ydisp;
    float32 xmin;               // is equal to coordinate 0
    float32 xmax;               // is equal to coordinate TERMINAL_MAXX-1
    float32 ymin;               // is equal to coordinate 0
    float32 ymax;               // is equal to coordinate TERMINAL_MAXY-1
    TTOUCH_STATUS status;
    TTOUCH_STATUS prev_status;
    uint32 touchmode;
} TTOUCH_DRIVER;

extern TTOUCH_DRIVER touch_driver;
extern TTOUCH_EVENT touch_event;

#ifdef TFT_OVER_DAS
extern TTOUCH_DASINFO das_touch_info;
#endif

void touch_periodic (void);
void touch_init (void);



#endif /* TOUCH_H_ */
